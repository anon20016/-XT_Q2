
@{
    Layout = "~/Pages/Moderator/_Layout.cshtml";

    Page.Name = "Moderate";

    IUserLogic userManagerLogic = new UserLogic(System.Web.Hosting.HostingEnvironment.MapPath("~/Data/users.txt"));
    IAwardAssotiateLogic awardManagerLogic = new AwardLogic(System.Web.Hosting.HostingEnvironment.MapPath("~/Data/awards.txt"), System.Web.Hosting.HostingEnvironment.MapPath("~/Data/assotiations.txt"));

    awardManagerLogic.LoadData();
    userManagerLogic.LoadData();

    var tempU = userManagerLogic.GetAll();
    var tempA = awardManagerLogic.GetAll();
    var tempAw = awardManagerLogic.GetAll();

    string addMessageA = "", removeMessageA = "", updateMessageA = "";
    string addMessageU = "", removeMessageU = "", updateMessageU = "";
    string addMessageW = "", removeMessageW = "", updateMessageW = "";

}

<h3>Awards</h3>

@{
    if (IsPost)
    {

        if (Request.Form.AllKeys.Contains("remove-name-award"))
        {
            try
            {
                awardManagerLogic.RemoveSecondId(awardManagerLogic.Find(Request["remove-name-award"]));
                if (!awardManagerLogic.RemoveAward(Request["remove-name-award"]))
                {
                    throw new FormatException("No such award");
                }
                awardManagerLogic.SaveData();

                Response.Redirect("~/Pages/Moderator/ModeratePanel");
            }
            catch (Exception e)
            {
                removeMessageA = e.Message;
            }
        }

        if (Request.Form.AllKeys.Contains("add-name-award"))
        {
            try
            {
                if (!awardManagerLogic.AddAward(Request["add-name-award"], Request["add-discr-award"]))
                {
                    throw new FormatException("This award already exists");
                }
                awardManagerLogic.SaveData();

                Response.Redirect("~/Pages/Moderator/ModeratePanel");
            }
            catch (Exception e)
            {

                addMessageA = e.Message;
            }
        }

        if (Request.Form.AllKeys.Contains("update-name-award"))
        {
            try
            {
                if (!awardManagerLogic.UpdateAward(lib.GetId(Request["select-update-award"]), new Award(lib.GetId(Request["select-update-award"]), Request["update-name-award"], Request["update-discr-award"])))
                {
                    throw new FormatException("No such Award");
                }
                awardManagerLogic.SaveData();

                Response.Redirect("~/Pages/Moderator/ModeratePanel");
            }
            catch (Exception e)
            {
                updateMessageA = e.Message;
            }
        }
    }
}
<div class="forminpt main-div">
    <form method="post">
        <fieldset class="adduser">
            <legend>Add Award</legend>
            <label>Name<input type="text" required name="add-name-award"></label>
            <label>Discription<input type="text" required name="add-discr-award"></label>
            <input type="submit" value="submit" id="add-button-award" />

            <label class="errorMessage">@addMessageA</label>

        </fieldset>
    </form>

    <form method="post">
        <fieldset class="removeuser">
            <legend id="a">Remove Award</legend>
            <label>Name<input type="text" required name="remove-name-award"></label>
            <input type="submit" value="submit" id="remove-button-award" onclick="return confirmDelete()" />

            <label class="errorMessage">@removeMessageA</label>
        </fieldset>

    </form>

    <form method="post">
        <fieldset class="updateuser">
            <legend id="a">Update Award</legend>
            <label for="select-update-award">Select Id award</label>
            <select name="select-update-award">
                @foreach (var item in tempA)
                {
                    string tmp = $"{item.Id} {item.Name}";
                    <option>@tmp</option>
                }
            </select>

            <label>Name<input type="text" required name="update-name-award"></label>
            <label>Discription<input type="text" required name="update-discr-award"></label>

            <input type="submit" value="submit" id="update-button" />

            <label class="errorMessage">@updateMessageA</label>
        </fieldset>

    </form>
</div>

<script>
    function confirmDelete() {
        if (confirm("If you delete an award, it will be deleted by all users!")) {
            return true;
        } else {
            return false;
        }
    }
</script>

<h3>Users</h3>

@{
    if (Request.Form.AllKeys.Contains("remove-name-user"))
    {
        try
        {
            awardManagerLogic.RemoveFirstId(userManagerLogic.Find(Request["remove-name-user"], Request["remove-dob-user"]));
            if (!userManagerLogic.RemoveUser(Request["remove-name-user"], Request["remove-dob-user"]))
            {
                throw new FormatException("No such user");
            }
            awardManagerLogic.SaveData();
            userManagerLogic.SaveData();

            Response.Redirect("~/Pages/Moderator/ModeratePanel");
        }
        catch (Exception e)
        {
            removeMessageU = e.Message;
        }
    }
    if (Request.Form.AllKeys.Contains("add-name-user"))
    {
        try
        {
            var MyFile = Request.Files["input-img-add-user"];

            if (MyFile != null && MyFile.ContentLength > 0)
            {
                int FileSize = MyFile.ContentLength;
                byte[] FileByteArray = new byte[FileSize];
                MyFile.InputStream.Read(FileByteArray, 0, FileSize);
                if (!userManagerLogic.AddUser(Request["add-name-user"], Request["add-dob-user"], Convert.ToBase64String(FileByteArray)))
                {
                    throw new FormatException("This user already exists");
                }
            }
            else
            {
                if (!userManagerLogic.AddUser(Request["add-name-user"], Request["add-dob-user"], ""))
                {
                    throw new FormatException("This user already exists");
                }
            }
            awardManagerLogic.SaveData();
            userManagerLogic.SaveData();

            Response.Redirect("~/Pages/Moderator/ModeratePanel");
        }
        catch (Exception e)
        {
            addMessageU = e.Message;
        }
    }
    if (Request.Form.AllKeys.Contains("update-name-user"))
    {
        try
        {
            var MyFile = Request.Files["input-img-update-user"];

            if (MyFile != null && MyFile.ContentLength > 0)
            {
                int FileSize = MyFile.ContentLength;
                byte[] FileByteArray = new byte[FileSize];
                MyFile.InputStream.Read(FileByteArray, 0, FileSize);
                if (!userManagerLogic.UpdateUser(lib.GetId(Request["select-update-user"]), new User(lib.GetId(Request["select-update-user"]), Request["update-name-user"], Request["update-dob-user"], Convert.ToBase64String(FileByteArray))))
                {
                    throw new FormatException("No such user");
                }
            }
            else
            {
                if (!userManagerLogic.UpdateUser(lib.GetId(Request["select-update-user"]), new User(lib.GetId(Request["select-update-user"]), Request["update-name-user"], Request["update-dob-user"], "")))
                {
                    throw new FormatException("No such user");
                }
            }
            userManagerLogic.SaveData();

            Response.Redirect("~/Pages/Moderator/ModeratePanel");
        }
        catch (Exception e)
        {
            updateMessageU = e.Message;
        }
    }
}


<div class="forminpt main-div">
    <form method="post" enctype="multipart/form-data">
        <fieldset class="adduser">
            <legend>Add User</legend>
            <label>Name<input type="text" required name="add-name-user"></label>
            <label>Date of birth<input type="text" required placeholder="dd.mm.yyyy" name="add-dob-user" pattern="^([0-2][0-9]|(3)[0-1])(\.)(((0)[0-9])|((1)[0-2]))(\.)\d{4}$"></label>

            <label for="input-img-add-user">Select image</label>
            <input type="file" name="input-img-add-user" accept="image/jpeg,image/png" />

            <input type="submit" value="submit" id="add-button-user" />

            <label class="errorMessage">@addMessageU</label>

        </fieldset>
    </form>

    <form method="post">
        <fieldset class="removeuser">
            <legend id="a">Remove User</legend>
            <label>Name<input type="text" required name="remove-name-user"></label>
            <label>Date of birth<input type="text" required placeholder="dd.mm.yyyy" name="remove-dob-user" pattern="^([0-2][0-9]|(3)[0-1])(\.)(((0)[0-9])|((1)[0-2]))(\.)\d{4}$"></label>
            <input type="submit" value="submit" id="remove-button-user" />
            <label class="errorMessage">@removeMessageU</label>
        </fieldset>
    </form>
    <form method="post" enctype="multipart/form-data">
        <fieldset class="updateuser">
            <legend id="a">Update User</legend>
            <label for="select-update-user">Select Id user</label>
            <select name="select-update-user">
                @foreach (var item in tempU)
                {
                    string tmp = $"{item.Id} {item.Name}";
                    <option>@tmp</option>
                }
            </select>

            <label>Name<input type="text" required name="update-name-user"></label>
            <label>Date of birth<input type="text" required placeholder="dd.mm.yyyy" name="update-dob-user" pattern="^([0-2][0-9]|(3)[0-1])(\.)(((0)[0-9])|((1)[0-2]))(\.)\d{4}$"></label>

            <label for="input-img-update-user">Select image</label>
            <input type="file" name="input-img-update-user" accept="image/jpeg,image/png" />

            <input type="submit" value="submit" id="update-button-user" />

            <label class="errorMessage">@updateMessageU</label>
        </fieldset>

    </form>


</div>


<h3>Give and take Awards</h3>

@{
    if (IsPost)
    {
        if (Request.Form.AllKeys.Contains("select-add-User"))
        {
            try
            {
                if (!awardManagerLogic.Associate(lib.GetId(Request["select-add-User"]), lib.GetId(Request["select-add-Award"])))
                {
                    throw new FormatException("Already graded");
                }

                awardManagerLogic.SaveData();
                userManagerLogic.SaveData();

                Response.Redirect("~/Pages/Moderator/ModeratePanel");

            }
            catch (Exception e)
            {
                addMessageW = e.Message;
            }
        }
        else
        {
            try
            {
                if (!awardManagerLogic.deAssociate(lib.GetId(Request["select-remove-User"]), lib.GetId(Request["select-remove-Award"])))
                {
                    throw new FormatException("User dont have this award");
                }

                awardManagerLogic.SaveData();
                userManagerLogic.SaveData();

                Response.Redirect("~/Pages/Moderator/ModeratePanel");

            }
            catch (Exception e)
            {
                removeMessageW = e.Message;
            }
        }
    }
}


<div class="forminpt main-div">
    <form method="post">
        <fieldset class="adduser">
            <legend>Give Award</legend>
            <label>User Id</label>
            <select name="select-add-User">
                @foreach (var item in tempU)
                {
                    string temp = $"{item.Id} {item.Name}";
                    <option>@temp</option>
                }
            </select>
            <label>Award Id</label>
            <select name="select-add-Award">
                @foreach (var item in tempAw)
                {
                    string temp = $"{item.Id} {item.Name}";
                    <option>@temp</option>
                }
            </select>

            <input type="submit" value="submit" id="addbutton" />
            <label class="errorMessage">@addMessageW</label>

        </fieldset>
    </form>

    <form method="post">
        <fieldset class="removeuser">
            <legend>Take Award</legend>
            <label>User Id</label>
            <select name="select-remove-User">
                @foreach (var item in tempU)
                {
                    string temp = $"{item.Id} {item.Name}";
                    <option>@temp</option>
                }
            </select>
            <label>Award Id</label>
            <select name="select-remove-Award">
                @foreach (var item in tempAw)
                {
                    string temp = $"{item.Id} {item.Name}";
                    <option>@temp</option>
                }
            </select>

            <input type="submit" value="submit" id="addbutton" />
            <label class="errorMessage">@removeMessageW</label>

        </fieldset>
    </form>

    </form>
</div>

